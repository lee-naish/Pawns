% bst stuff: conversion from list of ints to bst of ints destructively,
% printing tree,...
% Version with polymorphism and higher order. More potential sharing so
% we need renaming of functions to get versions with more specific types
% and different sharing information. A couple of buggy versions thrown
% in (detected by the compiler) to illustrate potential problems with
% type preservation when polymorphism is mixed with destructive update.

import from addlist.
import print_int from io.

type bst(T) ---> mt ; node(bst(T), T, bst(T)).
type ibst = bst(int).
type ints = list(int).
type rbst(T) = ref(bst(T)).
type ribst = rbst(int).

bst1 :: void -> ibst
    sharing bst1(v)=t
    pre nosharing
    post nosharing.
bst1(v) = {
    t = node(mt, 42, mt);
    return(t)
}.

ints1 :: void -> ints
    sharing ints1(v)= (is)
    pre nosharing
    post nosharing.
ints1(v) = {
    is = cons(4, cons(2, cons(1, cons(3, nil))));
    return(is)
}.

% Convert int list to ibst - note this appears "pure" to callers.
% Defined in terms of (renamed) HO polymorphic functions
list_bst :: ints -> ibst
    sharing list_bst(xs) = xt
    pre xs = abstract
    post nosharing.
list_bst(xs) = {
    % we need *tp to be type ibst, not bst(T) since its updated
    % *tp = (mt :: ibst);
    *tp = mt;
    ilist_bst_du(xs, (<=), !tp);
    return(*tp)
}.

% Dodgey version which could violate type preservation???
% Error detected during type checking
bug1_list_bst :: ints -> ibst
    sharing list_bst(xs) = xt
    pre xs = abstract
    post nosharing.
bug1_list_bst(xs) = {
    *tp = mt;               % tp :: ref(bst(T))
    ilist_bst_du(xs, (<=), !tp);   % mutates tp to ref(ibst)
    % tp types is instantiated to ref(ibst) so any subsequent
    % use of tp here in context where ref(bst(T)) expected, gives a type error
    return(*tp)
}.

% Dodgey version which could violate type preservation.
% Error detected during sharing analysis
bug2_list_bst :: ints -> ibst
    sharing list_bst(xs) = xt
    pre xs = abstract
    post nosharing.
bug2_list_bst(xs) = {
    *tp1 = mt;                  % tp1 :: ref(bst(T))
    tp2 = (tp1 :: ref(ibst));   % cast tp1 to get tp2
    % "Error: sharing of cast variable later implicitly mutated"
    % not really a need for this cast now that types get further instantiated
    ilist_bst_du(xs, (<=), !tp2) !tp1; % tp1 implicitly smashed
    % potential use of tp1 here in context where ref(bst(T)) expected,
    % but tp1 is now a ref(ibst) so type preservation would be violated
    *tp2
}.

% Attempt to use polymorphic HO code without renaming.
% The polymorphic code has list and tree elements sharing and the list
% cannot be abstract since the tree is updated (the elements are not
% actually updated but the declarations are not precise enough to convey
% that). Also demonstrates renaming+with
bug3_list_bst :: ints -> ibst.
renaming
    bug3_list_bst = list_bst
    with
    list_bst_du = ilist_bst_du.

% we rename the polymorphic code and use an instance of the types and
% different sharing (the list abstract but not sharing with the tree)
renaming
    ilist_bst_du = list_bst_du,
    ibst_insert_du = bst_insert_du.

ilist_bst_du :: ints -> (int -> int -> bool) -> ribst -> void
% sharing ilist_bst_du(xs, !tp) = v % XXX causes grief way down the track
    sharing ilist_bst_du(xs, leq, !tp) = v
    pre xs = abstract
    post nosharing.
ibst_insert_du :: int -> (int -> int -> bool) -> ribst -> void
    sharing ibst_insert_du(x, leq, !tp) = v
    pre nosharing
    post nosharing.

% Destructively add list of elements to tree we have ptr to.
% In general there will be sharing between list and tree elements and
% because the tree is destructively updated, the list (and its elements)
% but not be abstract (the fact that *only the outer structure* of the
% tree is updated is not captured by the declarations).  However, if
% the element type is atomic there is no sharing so
% by renaming this function (and bst_insert_du) and giving
% a more specific type, different sharing can be specified, including
% the list being abstract.
list_bst_du :: list(T) -> (T -> T -> bool) -> ref(bst(T)) -> void
    sharing list_bst_du(xs, letest, !tp) = v
    pre cases xs of {case cons(x, xs1): *tp = node(mt, x, mt)}
    % post cases xs of {case cons(x, xs1): *tp = node(mt, x, mt)}.
    post nosharing.
    % would be nice to be able to avoid cases and use eg
    % xs = cons(x, nil); *tp = node(mt, x, mt)
list_bst_du(xs, letest, tp) = {
    cases xs of {
    case cons(x, xs1):
	% need !xs below for polymorphic version, or any instance
	% where elements are not atomic
        bst_insert_du(x, letest, !tp) !xs1; % xs not updated
        list_bst_du(xs1, letest, !tp) !xs1; % xs not updated
        return
    case nil:
        return
    }
}.

% destructively add element to tree we have ptr to
% - traverse down to leaf and clobber it (while loop would be nice?)
bst_insert_du :: T -> (T -> T -> bool) -> ref(bst(T)) -> void
    sharing bst_insert_du(x, letest, !tp) = v
    pre *tp = node(mt, x, mt)
    post nosharing.
    % post *tp = node(mt, x, mt).
bst_insert_du(x, letest, tp) = {
    cases *tp of {
    case mt:
        *!tp := node(mt, x, mt)
    case node(*lp, n, *rp):
        if letest(x, n) then
            bst_insert_du(x, letest, !lp) !tp
        else
            bst_insert_du(x, letest, !rp) !tp
    }
}.

% print all elements of tree (inorder, no indentation etc to show tree
% structure).
print_tree :: ibst -> void
    implicit rw io
    sharing print_tree(t)=voidvar
    pre nosharing
    post nosharing.
print_tree(t) = {
    cases t of {
    case mt:
        return
    case node(l, n, r):
        !print_tree(l);
        !print_int(n);
        !print_tree(r);
        return
    }
}.

% as above for list
% implicit !io
print_ints :: list(int) -> void
    implicit rw io
    sharing print_ints(t)=voidvar
    pre nosharing
    post nosharing.
print_ints(t) = {
    cases t of {
    case nil:
        return
    case cons(n, r):
        !print_int(n);
        !print_ints(r);
        return
    }
}.


% see bst.pns for version with encapsulated counter
% Could do a higher order version with a foldr for trees
bst_sum :: ibst -> int
    sharing bst_sum(t) = i
    pre t = abstract
    post nosharing.
bst_sum(t) = {
    cases t of {
    case mt:
        0
    case node(l, n, r):
        bst_sum(l) + n + bst_sum(r)
    }
}.

