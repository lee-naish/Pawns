% test cases for state vars

main :: void -> void
    implicit rw io.
main(c) = { !putchar(!getchar(void))
}.

% some state vars
!isdef :: ref(int).
!undef :: ref(int).
!itdef :: bool. % XXX not a ref, ill-typed use
nobang :: ref(int). % XXX not mutable

test1 :: ref(int) -> ref(int)
    implicit
        ro io,  % XXX should be rw due to putchar+getchar
        wo undef, % XXX
        wo itdef, % XXX
        rw nobang, % XXX
        wo isdef
    sharing test1(ip0) = ip
    pre nosharing
    post nosharing. % XXX ip = isdef
test1(ip) = {
    *itdef = 42; % XXX ill-typed
    *isdef = 42;
    jp = isdef;
    io1 = io;
    putchar(!getchar(void)) !io1; % XXX ! missing on putchar
    *!io := io1 !io1; % can say *io is a pointer (but can't deref it)
    dummy = io1;
    jp
}.

test2 :: ref(int) -> ref(int)
    % implicit rw io % XXX missing
    sharing test2(!ip0) = ip
    pre nosharing
    post ip = ip0.
test2(ip) = {
    % !putchar(10);
    ip1 = !test1(ip); % defines isdef; XX uses io
    *j = 42;
    i = isdef;
    !test3(!j); % !i % XX isdef rw in test3 and shared with i
    !test4(!i); % precond allows sharing with isdef
    !test3(!i); % XX precond violation
    !test3(!isdef);   % !i %  isdef shared with i XX
    k = sharewithsv(!i) !isdef; 
    dummy = i;
    ip
}.

test3 :: ref(int) -> void
    implicit rw isdef
    sharing test3(!ip) = v
    pre nosharing
    post nosharing.
test3(ip) = {
    *!ip := 42
}.

test4 :: ref(int) -> void
    implicit rw isdef
    sharing test4(!ip) = v
    pre ip=isdef
    post nosharing.
test4(ip) = {
    *!ip := 42; void
}. % !isdef % XX


% if an argument shares with a sv of a function where the function doesn't
% have the sv as an implicit argument but a subcomputation uses it we have a
% problem! A solution (most flexible one?) is to say that if an arg of a
% function shares with a sv the sv must be an implicit arg of the function
% also.
sharewithsv:: ref(int) -> int
    sharing sharewithsv(!ip) = i
    pre nosharing
    post nosharing.
sharewithsv(ip) = {
    *!ip := 45;   % smashes *isdef if ip aliases it
    !init_isdef(void); % smashes *ip if it aliases isdef
    *ip          % returns 42 if ip aliases isdef
}.

ret_sv:: void -> ref(int)
    sharing ret_sv(v) = ip
    pre nosharing
    post nosharing.
ret_sv(v) = {
    !init_isdef(void); % *isdef = 40
    ip = isdef;
    ip
    % scope of isdef ends but alias escapes XXX
}.

ret_sv_val:: void -> ref(int)
    sharing ret_sv(v) = ip
    pre nosharing
    post nosharing.
ret_sv_val(v) = {
    !init_isdef(void); % *isdef = 40
    *ip = *isdef;      % ip points to new mem cell containing 40
    ip
    % returns same val as ret_sv but without sv alias
    % - safe, even if *isdef was not atomic
}.

sv_alias2:: void -> int
    sharing sv_alias2(v) = i
    pre nosharing
    post nosharing.
sv_alias2(v) = {
   ip = ret_sv(void);
   sharewithsv(!ip); % not clear ip aliases isdef because its not in scope
   *ip
}.

% Convert a function which doesn't have an implicit io parameter
% to an equivalent one which does (but its not used, of course)
%
% with_io :: (T1->T2) -> T1->T2 implicit rw io sharing f(a1,a2)=r pre
% (a1=abstract;a2=abstract) post (r=abstract;a1=abstract;a2=abstract).
% with_io :: (T1->T2) -> (T1->T2 implicit rw io) implicit rw io.
%
with_io :: (T1->T2) -> T1->T2 implicit rw io.
with_io(fn,arg) = { fn(arg)
}.
% 
% currently implicit args are only added for applications and checking
% compatability of arrow types enforces identical implicit arguments
% (FIX), so following gives a type error
% with_io(fn): fn.

% (Failed) attempt to convert a function which has an implicit io parameter
% to an equivalent one which doesn't (allowing io functions to be called
% by pure functions) - can't be done
% hide_io :: (T1->T2 implicit rw io) -> T1->T2 implicit rw io. % io exposed
hide_io :: (T1->T2 implicit rw io) -> T1 -> T2. % io hidden XX
hide_io(fn,arg) = { !fn(arg)
}.
% hide_io(fn): fn.

% test (unrelated) scope stuff
scope :: int -> void
    sharing scope(i) = v
    pre nosharing
    post nosharing.
scope(i) = {
    if i <= 0 then
	j = i
    else
        j = 42;
    if j <= 0 then
        k = nil            % :: list(T)
    else
        k = cons(42, nil); % :: list(int)
    l = k; % k not defined due to differing types above
    if j <= 0 then
        k1 = (nil :: list(int))
    else
        k1 = cons(42, nil);
    l1 = k1 % ok
}.

init_isdef :: void -> void
    implicit wo isdef
    sharing init_isdef(v0) = v
    pre nosharing
    post nosharing.
init_isdef(v) = {
    *isdef = 40
}.

% fn which introduces state var locally and return value shares with it
% - this could break things if allowed
scope_wo :: ref(int) -> ref(int)
    sharing scope_wo(ip0) = ip
    pre nosharing
    post ip = ip0.               % XXX ip = isdef not declared
    % post ip = ip0; ip = isdef. % XXX isdef is undefined here
scope_wo(ip) = {
    !init_isdef(void);  % defines isdef
    ip1 = isdef;      % sharing between isdef and ip1
    ip1
}.

% fn which introduces sharing with state var - need to include such
% sharing in postcond
scope_ro :: ref(int) -> ref(int)
    implicit ro isdef
    sharing scope_ro(ip0) = ip
    pre nosharing
    post nosharing.      % XXX ip = isdef not declared
    % post ip = isdef.
scope_ro(ip) = {
    ip1 = isdef;      % sharing between isdef and ip1
    ip1
}.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% stubs
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% asserted by system
type iotype ---> iocons. % should be opaque
% !io :: ref(iotype).

putchar :: int -> void
    implicit rw io.
putchar(c) = { !putchar(c)
}.

getchar :: void -> int
    implicit rw io.
getchar(c) = { !getchar(c)
}.

