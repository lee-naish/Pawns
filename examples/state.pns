% test cases for state vars

import from io. % get_char etc

main :: void -> void
    implicit rw io.
main(c) = { !put_char(!get_char(void))
}.

% duspec for just second arg of a pair du, so first arg could
% potentially be abstract
du_spec [
% if we don't have type info in du_spec_vpc_def_bang then we don't know
% if paths have been folded so we need a more general path with ...
    % du_t2_2 = ...t2(!,!) % allow both args du
    du_t2_2 = ...t2(?,!)
    % du_t2_2 = t2(?,!)
    ].

% some state vars
!isdef :: ref(int).
!undef :: ref(int).
!itdef :: bool. % XX not a ref, ill-typed use
nobang :: ref(int). % XX not mutable
!hasabs^du_t2_2 :: ref(pair(maybe(bool),maybe(bool))).

test1 :: ref(int) -> ref(int)
    implicit
        ro io,  % XX should be rw due to put_char+get_char
        wo undef, % XX
        wo itdef, % XX
        rw nobang, % XX
        wo isdef
    sharing test1(ip0) = ip
    pre nosharing
    post nosharing. % XX ip = isdef
test1(ip) = {
    *itdef = 42; % XX ill-typed
    *isdef = 42;
    jp = isdef;
    io1 = io;
    put_char(!get_char(void)) !io1; % XX ! missing on put_char
    *!io := *io1 !io1; % can say *io is a pointer (but we can't deref it)
    dummy = io1;
    jp
}.

test2 :: ref(int) -> ref(int)
    % implicit rw io % XX missing
    implicit ro isdef, wo isdef % XX isdef repeated
    sharing test2(!ip0) = ip
    pre nosharing
    post ip = ip0.
test2(ip) = {
    % !put_char(10);
    ip1 = !test1(ip); % defines isdef; XX uses io
    *j = 42;
    i = isdef;
    !test3(!j); % !i % XX isdef rw in test3 and shared with i
    !test4(!i); % precond allows sharing with isdef
    !test3(!i); % XX precond violation
    !test3(!isdef);   % !i %  isdef shared with i XX
    k = sharewithsv(!i) !isdef; % XX isdef must be implicit rw
    dummy = i;
    ip
}.

test3 :: ref(int) -> void
    implicit rw isdef
    sharing test3(!ip) = v
    pre nosharing
    post nosharing.
test3(ip) = {
    *!ip := 42
}.

test4 :: ref(int) -> void
    implicit rw isdef
    sharing test4(!ip) = v
    pre ip=isdef
    post nosharing.
test4(ip) = {
    *!ip := 42 % XX needs !isdef
}.


% if an argument shares with a sv of a function where the function doesn't
% have the sv as an implicit argument but a subcomputation uses it we have a
% problem! A solution (most flexible one?) is to say that if an arg of a
% function shares with a sv the sv must be an implicit arg of the function
% also.
sharewithsv:: ref(int) -> int
    sharing sharewithsv(!ip) = i
    pre nosharing
    post nosharing.
sharewithsv(ip) = {
    *!ip := 45;   % smashes *isdef if ip aliases it
    !init_isdef(42); % smashes *ip if it aliases isdef
    *ip          % returns 42 if ip aliases isdef
}.

ret_sv:: void -> ref(int)
    sharing ret_sv(v) = ip
    pre nosharing
    post nosharing.
ret_sv(v) = {
    !init_isdef(42);
    ip = isdef;
    ip
    % scope of isdef ends but alias escapes XX
}.

ret_sv_val:: void -> ref(int)
    sharing ret_sv(v) = ip
    pre nosharing
    post nosharing.
ret_sv_val(v) = {
    !init_isdef(42);
    *ip = *isdef;
    ip
    % returns same val as ret_sv but without sv alias
    % - safe, even if *isdef was not atomic
}.

sv_alias2:: void -> int
    sharing sv_alias2(v) = i
    pre nosharing
    post nosharing.
sv_alias2(v) = {
   ip = ret_sv(void);
   sharewithsv(!ip); % not clear ip aliases isdef because its not in scope
   *ip
}.

% Convert a function which doesn't have an implicit io parameter
% to an equivalent one which does (but its not used, of course)
%
% with_io :: (T1->T2) -> T1->T2 implicit rw io sharing f(a1,a2)=r pre
% (a1=abstract;a2=abstract) post (r=abstract;a1=abstract;a2=abstract).
% with_io :: (T1->T2) -> (T1->T2 implicit rw io) implicit rw io.
%
with_io :: (T1->T2) -> T1->T2 implicit rw io.
with_io(fn,arg) = { fn(arg)
}.
% 
% currently implicit args are only added for applications and checking
% compatability of arrow types enforces identical implicit arguments
% (FIX), so following gives a type error
% with_io(fn): fn.

% (Failed) attempt to convert a function which has an implicit io parameter
% to an equivalent one which doesn't (allowing io functions to be called
% by pure functions) - can't be done
% hide_io :: (T1->T2 implicit rw io) -> T1->T2 implicit rw io. % io exposed
hide_io :: (T1->T2 implicit rw io) -> T1 -> T2. % io hidden XX
hide_io(fn,arg) = { !fn(arg)
}.
% hide_io(fn): fn.

% test (unrelated) scope stuff
scope :: int -> void
    sharing scope(i) = v
    pre nosharing
    post nosharing.
scope(i) = {
    if i <= 0 then
	j = i
    else
        j = 42;
    if j <= 0 then
        k = nil            % :: list(T)
    else
        k = cons(42, nil); % :: list(int)
    l = k; % k not defined due to differing types above
    if j <= 0 then
        % k1 = (nil :: list(int)) % previously needed cast
        k1 = nil % types unified now
    else
        k1 = cons(42, nil);
    l1 = k1 % ok
}.

init_isdef :: int -> void
    implicit wo isdef
    sharing init_isdef(v0) = v
    pre nosharing
    post nosharing.
init_isdef(i) = {
    *isdef = i
}.

% wrapped version of above - isdef defined indirectly via a function
init_isdef_w :: int -> void
    implicit wo isdef
    sharing init_isdef_w(v0) = v
    pre nosharing
    post nosharing.
init_isdef_w(i) = {
    !init_isdef(i)
    % isdef now defined to it can be (implicitly) returned
}.

% fn which introduces state var locally and return value shares with it
% - ok *if* its declared wo
scope_wo :: ref(int) -> ref(int)
    implicit wo isdef
    sharing scope_wo(ip0) = ip
    pre nosharing
    % post nosharing.         % ip = isdef missing
    post ip = isdef.
scope_wo(ip) = {
    !init_isdef_w(42);  % defines isdef
    % !init_isdef(42);  % redefinition of isdef
    ip1 = isdef;      % sharing between isdef and ip1
    ip1
}.

% fn which introduces sharing with state var - need to include such
% sharing in postcond
scope_ro :: ref(int) -> ref(int)
    implicit ro isdef
    sharing scope_ro(ip0) = ip
    pre nosharing
    % post nosharing.      % XX
    post ip = isdef.       % ok
scope_ro(ip) = {
    ip1 = isdef;      % sharing between isdef and ip1
    ip1
}.

% Note: parsed (currently) as int -> (ref(int) -> void implicit ...)
% (may change)
% tends to break if we call a fn that needs isdef
test5 :: int -> ref(int) -> void
    implicit rw isdef
    sharing test5(i, !ip) = v
    pre ip=isdef
    post nosharing.
test5(i, ip) = {
    *!ip := 42 !isdef
}.

% Return a closure that uses a sv: the implicit ro&rw args of the return
% (arrow) type are inherited to the outer type so rwclosure_ret has rw isdef
% (a bit confusing when there is sharing declared for inner and
% outer arrows but its needed).
% rwclosure_ret:: ref(int) -> % version returning test4 (OK)
%         (ref(int) -> void
%         implicit rw isdef
%         % XXX compiler missing renaming - can't rename ip or we get
% 	% Error: incompatible mutable argument 
%         sharing f(!ip) = v
%         pre ip=isdef
%         post nosharing)
%     sharing rwclosure_ret(ip0) = ip
%     pre nosharing
%     post nosharing.
rwclosure_ret:: ref(int) ->
        (ref(int) -> void
        implicit rw isdef
        sharing f(i, !ip) = v  % need i, represents closure arg
        pre ip=isdef
        post nosharing)
    % implicit rw isdef % now OK  XX can't declare here and above
    sharing rwclosure_ret(ip0) = ip
    pre nosharing
    post nosharing.
rwclosure_ret(ip) = {
    % !init_isdef(42); % XX already defined because it's rw in this fn
    % !test4 % return closure
    !test5(2) % return closure
}.

% Return a closure that uses a wo sv: the implicit wo arg of the return
% (arrow) type isn't inherited to the outer type so woclosure_ret has no
% implicit arguments. Calling woclosure_ret doesn't init the sv but
% calling what it returns does.
woclosure_ret:: ref(int) ->
        (int -> void
        implicit wo isdef
        sharing f(v0) = v
        pre nosharing
        post nosharing)
    sharing woclosure_ret(ip0) = ip
    pre nosharing
    post nosharing.
woclosure_ret(ip) = {
    !init_isdef(42); % OK - inits isdef (old value saved)
    % can use isdef here
    !init_isdef % return closure that will init isdef *when it is called*
    % end of isdef scope (old value restored)
}.

use_closure_ret :: ref(int) -> ref(int)
    sharing use_closure_ret(!ip) = ip0 % XXX can't swap vars
    pre nosharing
    post ip = ip0.
use_closure_ret(ip) = {
   % !init_isdef(void);
   fwo = woclosure_ret(ip);
   % f1 = rwclosure_ret(ip); % XX isdef not defined yet + needs !
   !fwo(42);	% inits isdef
   f2 = !rwclosure_ret(ip); % isdef now defined - ok
   !f2(!ip); % test5(2, ip), updates ip
   % we get an error returning ip because sharing analysis says it might
   % share with isdef.  It doesn't, but the precondition of f2 (test5)
   % allows it and it's assumed it might be in the postcondition also
   % XXX might be able to fix this (is it just a problem with state
   % vars?)
   ip
}.

nested_sv :: int ->
        (int -> int implicit wo isdef, rw io)
    implicit ro io.
nested_sv(i) = {
   ip
}.

nsv :: int -> int implicit wo isdef, rw io.
nsv(i) = {
   !put_char(10);
   *isdef = i;
   i
}.

use_nested_sv :: int -> int
    implicit rw io.
use_nested_sv(i) = {
   f = !nested_sv(42);
   j = !f(3);
   % !f(3);
   *isdef
}.


% test duspec on state var hasabs
test_hasabs :: maybe(bool) -> maybe(bool)
    implicit rw hasabs
    sharing test_hasabs(v0) = v
    pre (t = just(true); t = abstract; *hasabs = t2(t,v0))
    % pre (t = just(true); *hasabs = t2(t,nothing); *hasabs=abstract)
    post nosharing.
test_hasabs(b) = {
    % h = t2(b, b);
    % *!hasabs := h;
    cases *hasabs of {
    % case t2(*a, *b): % XX type, not redefinition error
    case t2(*x, *y):
        % *!x := just(false) !hasabs; % XX hasabs._ref.t2/2.1 might be modified
        *!x := just(true) !hasabs^ref(...t2(!,?));
        *!y := nothing !hasabs;
        cases *x of {
	case just(*z):
             *!z := true !x!hasabs % XX hasabs._ref.t2/2.1.just non-DU, abs
        }
    };
    % t % XX postcond violation
    nothing
}.
